<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">
	
	<!-- 在spring-servlet.xml中只需要扫描所有带@Controller注解的类 -->
	<context:component-scan base-package="com.ricardo.springmvc.lesson*.**"/>
	<!-- 启动注解型配置 -->
	<mvc:annotation-driven/> 

		<!-- 在springmvc.xml文件中配置<aop:aspectj-autoproxy/>，
		 springmvc中<context:component-scan/>扫描到的@Component@Aspect类会自动注册
		 同时也只有springmvc中<context:component-scan/>扫描到的@Component类可以被编织
		 这里开启<mvc::component-scan/>所以@Controller的类才可以被AOP代理
	
	-->
		<aop:aspectj-autoproxy expose-proxy="true"> </aop:aspectj-autoproxy>

	<!-- 静态文件的配置 (For Resources *.css, *.js, image,..) ,所有的handlerMapping以及HandlerResolver都绑定了 -->
	<mvc:default-servlet-handler/>
	
	<mvc:resources location="/WEB-INF/views/staticPages/" mapping="/staticPages/**"></mvc:resources>
	<!-- ↑↑↑↑↑↑↑↑↑↑↑↑↑ 将Location当中的路径匹配到@Controller文件中@RequestMapping -->
	<!-- 在@RequestMapping中 return "redirect:staticPages/final.html"-->
	<!-- 就跳转到 项目名字/WEB-INF/views/staticPages/final.html -->
	
	
	


	
	<!--  
	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
	<property name="order" value="0" />
	</bean>通过beanName查找Handler的HandlerMapping -->

	<!-- 配置验证表格错误的信息文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    	<property name="basename" value="messages" />
    	<!-- messages 对应/SRC/messages.properties文件,部署部分为\WEB-INF\classes\messages.properties文件-->
	</bean>

	<!-- 用于处理文件类的Resolver -->
	 <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

    
	<!-- ViewResolver 通过order设置优先级,使用多种ViewResolver -->
	<!-- 方法一 InternalResourceViewResolver 进行jsp,html的配置  -->
	<!-- 方法二 ResourceBundleViewResolver 通过views.propertiesjsp,html,pdf,json等的映射 -->
	<!-- 方法三 XmlViewResolver通过location定义下的xml文件进行jsp,html,pdf,json等的映射 -->
	<!-- 方法四 通过order设置优先级,使用多种viewResolver -->
	<!-- 方法五 通过ContentNegotiatingViewResolver 对需要的ViewResolver进行配置管理 -->	
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"/>
  
    <!--<mvc:view-controller path="/" view-name="index"/>-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <value>
                json=text/plain
                xml=application/xml
                pdf=application/pdf

            </value>
        </property>
        <property name="defaultContentType" value="text/html"/>

    </bean>

    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="0"/>
        <property name="contentNegotiationManager" ref="contentNegotiationManager"/>
        <property name="viewResolvers">
            <list>
				<!-- XmlViewResolver也可以通过location下的xml文件设置来支持各种视图  感觉和ResourceBundleViewResolver差不多 -->
				<bean class="org.springframework.web.servlet.view.XmlViewResolver">
	 			 <property name="order" value="1" /> 
	  				<property name="location">
        			 <value>/WEB-INF/views.xml</value>
      				</property>  
      			</bean>
				
				
            	<bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver">  
					 <!--  <property name="order" value="1" /> -->
					<property name="basename" value="views"/>    
					<property name="defaultParentView" value="parentView"/>	
				</bean>
	
				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					 <!--  <property name="order" value="1" /> -->
					 <!-- ViewClass:jstlview表示jsp末班页面需要使用JSTL标签库 -->
					<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
					<!-- @Controller-@RequestMapping return “something” -->
					<property name="prefix" value="/WEB-INF/views/"></property>
					<property name="suffix" value=".jsp"></property>
					<!-- 访问/WEB-INF/views/something.jsp文件 -->		
				</bean>


            	<!-- ResourceBundleViewResolver需要在/SRC/views.properties里面设置对应的ModelAndView与Bean -->
				<!-- 可以支持自定义视图以及jsp,html结尾的视图等等 -->

            </list>
        </property>
        <property name="defaultViews">
            <list>
           		<bean id="rssview" class="com.ricardo.springmvc.lesson6.utils.UserRSSView"></bean>
				<bean id="pdfview" class="com.ricardo.springmvc.lesson8.utils.UserPDFView"></bean>
				<bean id="xlsview" class="com.ricardo.springmvc.lesson8.utils.UserExcelView"></bean>
            	
            </list>
        </property>
    </bean>

 

	    <!-- interceptor setting -->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/handlerInterceptor/addUser"/>
            <bean class="com.ricardo.springmvc.lesson9.interceptor.UserInterceptor"></bean>
        </mvc:interceptor>        
    </mvc:interceptors>

	
	 
	
</beans>
